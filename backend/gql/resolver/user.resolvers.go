package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	gqlmodel "github.com/shiqi/datai/backend/gql/model"
	"github.com/shiqi/datai/backend/internal/middleware"
	"github.com/shiqi/datai/backend/internal/user"
)

// UpsertUser is the resolver for the upsertUser field.
func (r *mutationResolver) UpsertUser(ctx context.Context, input gqlmodel.UpsertUserInput) (*gqlmodel.User, error) {
	userID, err := middleware.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, fmt.Errorf("unauthorized: %w", err)
	}

	// 使用Service层处理业务逻辑
	nickname := ""
	if input.Nickname != nil {
		nickname = *input.Nickname
	}
	avatar := ""
	if input.Avatar != nil {
		avatar = *input.Avatar
	}

	result, err := r.UserService.UpsertUser(ctx, user.UpsertUserInput{
		UID:      userID,
		Nickname: nickname,
		Avatar:   avatar,
	})
	if err != nil {
		return nil, err
	}

	// 转换Service输出到GraphQL模型
	nicknameResult := ""
	if result.Nickname.Valid {
		nicknameResult = result.Nickname.String
	}
	avatarResult := ""
	if result.Avatar.Valid {
		avatarResult = result.Avatar.String
	}
	createdAt := ""
	if result.CreatedAt.Valid {
		createdAt = result.CreatedAt.Time.Format("2006-01-02T15:04:05Z")
	}

	return &gqlmodel.User{
		ID:        fmt.Sprintf("%d", result.ID),
		UID:       result.Uid,
		Nickname:  &nicknameResult,
		Avatar:    &avatarResult,
		CreatedAt: &createdAt,
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*gqlmodel.User, error) {
	userID, err := middleware.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, fmt.Errorf("unauthorized: %w", err)
	}

	// 使用Service层获取用户信息
	user, err := r.UserService.GetUserByUID(ctx, userID)
	if err != nil {
		return nil, err
	}

	if user == nil {
		return nil, fmt.Errorf("user not found")
	}

	nickname := ""
	if user.Nickname.Valid {
		nickname = user.Nickname.String
	}
	avatar := ""
	if user.Avatar.Valid {
		avatar = user.Avatar.String
	}
	createdAt := ""
	if user.CreatedAt.Valid {
		createdAt = user.CreatedAt.Time.Format("2006-01-02T15:04:05Z")
	}

	return &gqlmodel.User{
		ID:        fmt.Sprintf("%d", user.ID),
		UID:       user.Uid,
		Nickname:  &nickname,
		Avatar:    &avatar,
		CreatedAt: &createdAt,
	}, nil
}
